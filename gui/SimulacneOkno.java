/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import jadro.IObserver;
import javax.swing.table.DefaultTableModel;
import simulacia.KozmetickySalon;
import zamestnanci.Kadernicka;
import zamestnanci.Kozmeticka;
import zamestnanci.Recepcna;

/**
 *
 * @author Jožko
 */
public class SimulacneOkno extends javax.swing.JFrame implements IObserver {
    SimulacneOkno toto;
    DefaultTableModel model;  
    boolean pauza = false;
    boolean koniec = false;
    /**
     * Creates new form SimulacneOkno
     */
    public SimulacneOkno() {
        initComponents();   
        model = (DefaultTableModel) tabulkaRecepcnych.getModel();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pocetRecepcnych = new javax.swing.JTextField();
        pocetKadernicok = new javax.swing.JTextField();
        pocetKozmeticok = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabulkaRecepcnych = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabulkaKadernicok = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabulkaKozmeticok = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        recepcneRadStatistiky = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        kadernickyRadStatistiky = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        kozmetickyRadStatistiky = new javax.swing.JTable();
        spojitostSimulacie = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        pauzaTlac = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ineStatistiky = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1000, 700));

        jLabel1.setText("R:");

        jLabel2.setText("Kad:");

        jLabel3.setText("Koz:");

        jButton1.setText("Štart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Recepčné:");

        tabulkaRecepcnych.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recepčná", "Stav", "Vyťaženie", "Vyťaženie bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabulkaRecepcnych);

        jLabel5.setText("Kaderníčky:");

        tabulkaKadernicok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kaderníčka", "Stav", "Vyťaženie", "Vyťaženie bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabulkaKadernicok);

        jLabel6.setText("Kozmetičky:");

        tabulkaKozmeticok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kozmetička", "Stav", "Vyťaženie", "Vyťaženie bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tabulkaKozmeticok);

        recepcneRadStatistiky.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Aktuálna dĺžka radu - objednávky", "0", null},
                {"Priemerný čas v rade - objednávky", "0", null},
                {"Priemerná dĺžka radu - objednávky", "0", null},
                {"Aktuálna dĺžka radu - platby", "0", null},
                {"Priemerný čas v rade - platby", "0", null},
                {"Priemerná dĺžka radu - platby", "0", null},
                {"Priemerný čas obsluhy", "0", null}
            },
            new String [] {
                "Štatistika", "Hodnota", "Hodnota bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(recepcneRadStatistiky);

        kadernickyRadStatistiky.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Aktuálna dĺžka radu", "0", null},
                {"Priemerný čas v rade", "0", null},
                {"Priemerná dĺžka radu", "0", null},
                {"Priemerný čas obsluhy", "0", null}
            },
            new String [] {
                "Štatistika", "Hodnota", "Hodnota bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(kadernickyRadStatistiky);

        kozmetickyRadStatistiky.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Aktuálna dĺžka radu", "0", null},
                {"Priemerný čas čakania na čistenie", "0", null},
                {"Priemerný čas čakania na líčenie", "0", null},
                {"Priemerná dĺžka radu", "0", null},
                {"Priemerný čas obsluhy", "0", null}
            },
            new String [] {
                "Štatistika", "Hodnota", "Hodnota bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(kozmetickyRadStatistiky);

        spojitostSimulacie.setMaximum(2000);
        spojitostSimulacie.setMinimum(1);
        spojitostSimulacie.setValue(1);

        jLabel9.setText("Rých:");

        pauzaTlac.setText("Pauza");
        pauzaTlac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauzaTlacActionPerformed(evt);
            }
        });

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        jLabel12.setText("Recepčné rady:");

        jLabel13.setText("Kaderníčky rad:");

        jLabel14.setText("Kozmetičky rad:");

        jButton2.setText("Menu");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ineStatistiky.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Simulačný čas", "00:00:00", null},
                {"Otvorené naviac", "00:00:00", null},
                {"Počet ľudí - prišlo", "0", "0"},
                {"Počet ľudí odišlo", "0", "0"},
                {"Čas v systéme", "00:00:00", "00:00:00"},
                {"Počet ľudí vyhodených", "0", null}
            },
            new String [] {
                "Štatistika", "Hodnota", "Hodnota bez"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ineStatistiky);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pocetRecepcnych, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pocetKadernicok, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pocetKozmeticok, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pauzaTlac)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9))
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spojitostSimulacie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jLabel6))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pocetRecepcnych, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pocetKadernicok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pocetKozmeticok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jButton1)
                        .addComponent(jLabel9)
                        .addComponent(pauzaTlac)
                        .addComponent(stop))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spojitostSimulacie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel13))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        toto = this;

        Thread thread = new Thread(){
            @Override
            public void run(){
                KozmetickySalon salon;
                salon = new KozmetickySalon(28800, Integer.parseInt(pocetRecepcnych.getText()), Integer.parseInt(pocetKadernicok.getText()), Integer.parseInt(pocetKozmeticok.getText()), 1);
                salon.pridajObservera(toto);                      
                salon.predReplikaciou();
                salon.vykonajReplikaciu();
            }
        };
        thread.start();             
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pauzaTlacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauzaTlacActionPerformed
        if (pauza == false) {
            pauza = true;
            pauzaTlac.setText("Ďalej");
        } else {
            pauza = false;
            pauzaTlac.setText("Pauza");
        }
    }//GEN-LAST:event_pauzaTlacActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        koniec = true;
    }//GEN-LAST:event_stopActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Menu().setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulacneOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulacneOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulacneOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulacneOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulacneOkno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ineStatistiky;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable kadernickyRadStatistiky;
    private javax.swing.JTable kozmetickyRadStatistiky;
    private javax.swing.JButton pauzaTlac;
    private javax.swing.JTextField pocetKadernicok;
    private javax.swing.JTextField pocetKozmeticok;
    private javax.swing.JTextField pocetRecepcnych;
    private javax.swing.JTable recepcneRadStatistiky;
    private javax.swing.JSlider spojitostSimulacie;
    private javax.swing.JButton stop;
    private javax.swing.JTable tabulkaKadernicok;
    private javax.swing.JTable tabulkaKozmeticok;
    private javax.swing.JTable tabulkaRecepcnych;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Object objekt) {       
        // model tabulky recepcne - vypis
        DefaultTableModel modelRec = (DefaultTableModel) tabulkaRecepcnych.getModel();
        
        // model tabulky kadernicky - vypis
        DefaultTableModel modelKad = (DefaultTableModel) tabulkaKadernicok.getModel();
        
        // model tabulky kozmeticky - vypis
        DefaultTableModel modelKoz = (DefaultTableModel) tabulkaKozmeticok.getModel();
         
        // aktualizacia hodnot v tabulke recepcnych
        if (modelRec.getRowCount() > 0) { // ak je uz tabulka naplnena, len aktualizuj stavy personalu
            for (int i = 0; i < ((KozmetickySalon) objekt).zoznamVsetkychRecepcnych().size(); i++) {
                String data2 = "nepracuje";
                if (((KozmetickySalon) objekt).zoznamVsetkychRecepcnych().get(i).dajStavPracovania()) {
                    data2 = "pracuje";
                }
                // aktualizacia stavu (pracuje, nepracuje)
                modelRec.setValueAt(data2, i, 1);
                // aktualizacia aktualnej hodnoty vytazenia pracovnicky
                modelRec.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychRecepcnych().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 2);
                if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
                    modelRec.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychRecepcnych().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 3);
                }
            }
        } else { // ak je tabulka nenaplnena, tak ju napln personalom
            for (Recepcna recepcna : ((KozmetickySalon) objekt).zoznamVsetkychRecepcnych()) {
                String idRec = String.valueOf(recepcna.dajID());
                String stavRec = "nepracuje";
                if (recepcna.dajStavPracovania()) {
                    stavRec = "pracuje";
                }
                String vytazenieRec = "0%";
                Object[] row = {idRec, stavRec, vytazenieRec, vytazenieRec};
                modelRec.addRow(row);
            }
        }
        
        // aktualizacia hodnot v tabulke kadernicok
        if (modelKad.getRowCount() > 0) { // ak je uz tabulka naplnena, len aktualizuj stavy personalu
            for (int i = 0; i < ((KozmetickySalon) objekt).zoznamVsetkychKadernicok().size(); i++) {
                String data2 = "nepracuje";
                if (((KozmetickySalon) objekt).zoznamVsetkychKadernicok().get(i).dajStavPracovania()) {
                    data2 = "pracuje";
                }
                // aktualizacia stavu (pracuje, nepracuje)
                modelKad.setValueAt(data2, i, 1);
                // aktualizacia aktualnej hodnoty vytazenia pracovnicky
                modelKad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychKadernicok().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 2);
                if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
                    modelKad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychKadernicok().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 3);
                }
            }
        } else { // ak je tabulka nenaplnena, tak ju napln personalom
            for (Kadernicka kadernicka : ((KozmetickySalon) objekt).zoznamVsetkychKadernicok()) {
                String idRec = String.valueOf(kadernicka.dajID());
                String stavRec = "nepracuje";
                if (kadernicka.dajStavPracovania()) {
                    stavRec = "pracuje";
                }
                String vytazenieKad = "0%";
                Object[] row = {idRec, stavRec, vytazenieKad, vytazenieKad};
                modelKad.addRow(row);
            }
        }
        
        // aktualizacia hodnot v tabulke kozmeticok
        if (modelKoz.getRowCount() > 0) { // ak je uz tabulka naplnena, len aktualizuj stavy personalu
            for (int i = 0; i < ((KozmetickySalon) objekt).zoznamVsetkychKozmeticok().size(); i++) {
                String data2 = "nepracuje";
                if (((KozmetickySalon) objekt).zoznamVsetkychKozmeticok().get(i).dajStavPracovania()) {
                    data2 = "pracuje";
                }
                // aktualizacia stavu (pracuje, nepracuje)
                modelKoz.setValueAt(data2, i, 1);
                // aktualizacia aktualnej hodnoty vytazenia pracovnicky
                modelKoz.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychKozmeticok().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 2);
                if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
                    modelKoz.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).zoznamVsetkychKozmeticok().get(i).vypocitajVytazenie(((KozmetickySalon) objekt).dajSimulacnyCas())) + "%", i, 3);
                }
            }
        } else { // ak je tabulka nenaplnena, tak ju napln personalom
            for (Kozmeticka kozmeticka : ((KozmetickySalon) objekt).zoznamVsetkychKozmeticok()) {
                String idRec = String.valueOf(kozmeticka.dajID());
                String stavRec = "nepracuje";
                if (kozmeticka.dajStavPracovania()) {
                    stavRec = "pracuje";
                }
                String vytazenieKoz = "0%";
                Object[] row = {idRec, stavRec, vytazenieKoz, vytazenieKoz};
                modelKoz.addRow(row);
            }
        }
              
        // model tabulky - statistiky radu - recepcne
        DefaultTableModel modelRecRad = (DefaultTableModel) recepcneRadStatistiky.getModel();
        
        // model tabulky - statistiky radu - kadernicky
        DefaultTableModel modelKadRad = (DefaultTableModel) kadernickyRadStatistiky.getModel();
        
        // model tabulky - statistiky radu - kozmeticky
        DefaultTableModel modelKozRad = (DefaultTableModel) kozmetickyRadStatistiky.getModel();
        
        // aktualizacia aktualnej dlzky radu pred recepcnymi - objednavka
        modelRecRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredRecepcnymi(), 0, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredRecepcnymi(), 0, 2);
        }
        // aktualizacia aktualnej dlzky radu pred recepcnymi - platba
        modelRecRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredRecepcnymiPlatba(), 3, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredRecepcnymiPlatba(), 3, 2);
        }
        // aktualizacia priemernej dlzky radu pred recepcnymi - objednavka
        modelRecRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduRecepcneObjednavka()), 2, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduRecepcneObjednavka()), 2, 2);
        }
        // aktualizacia priemernej dlzky radu pred recepcnymi - platba
        modelRecRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduRecepcnePlatba()), 5, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduRecepcnePlatba()), 5, 2);
        }
        // aktualizacia priemerneho casu v rade pred recepcnymi - objednavka
        modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredRecepcnymiObjednavka()), 1, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredRecepcnymiObjednavka()), 1, 2);
        }
        // aktualizacia priemerneho casu v rade pred recepcnymi - platba
        modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredRecepcnymiPlatba()), 4, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredRecepcnymiPlatba()), 4, 2);
        }
        // aktualizacia priemernej doby obsluhy recepcnymi
        modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyRecepcne()), 6, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelRecRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyRecepcne()), 6, 2);
        }
        
        // aktualizacia aktualnej dlzky radu pred kadernickami
        modelKadRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredKadernickai(), 0, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKadRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredKadernickai(), 0, 2);
        }
        // aktualizacia priemerneho casu v rade pred kadernickami
        modelKadRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKadernickmi()), 1, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKadRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKadernickmi()), 1, 2);
        }
        // aktualizacia priemernej dlzky radu pred kadernickami
        modelKadRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduKadernicky()), 2, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKadRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduKadernicky()), 2, 2);
        }
        // aktualizacia priemernej doby obsluhy kadernickami
        modelKadRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyKadernicky()), 3, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKadRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyKadernicky()), 3, 2);
        }
        
        // aktualizacia aktualnej dlzky radu pred kozmetickami
        modelKozRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredKozmetickami(), 0, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKozRad.setValueAt(((KozmetickySalon) objekt).dajPocetLudiVRadePredKozmetickami(), 0, 2);
        }
        // aktualizacia priemerneho casu v rade pred kozmetickami - cistenie
        modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKozmetickamiCistenie()), 1, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKozmetickamiCistenie()), 1, 2);
        }
        // aktualizacia priemerneho casu v rade pred kozmetickami - licenie
        modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKozmetickamiLicenie()), 2, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasCakaniaVRadePredKozmetickamiLicenie()), 2, 2);
        }
        // aktualizacia priemernej dlzky radu pred kozmetickami
        modelKozRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduKozmeticky()), 3, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKozRad.setValueAt(String.format("%.2f", ((KozmetickySalon) objekt).dajPriemernuDlzkuRaduKozmeticky()), 3, 2);
        }
        // aktualizacia priemernej doby obsluhy kozmetickami
        modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyKozmeticky()), 4, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelKozRad.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyKozmeticky()), 4, 2);
        }
            
        // zmena hodnoty spojitosti simulacie
        ((KozmetickySalon) objekt).zmenaMedzerySpojitostSimulacie(this.spojitostSimulacie.getValue());
        
        // zmena stavu simulacie (beh, pauza)
        ((KozmetickySalon) objekt).zmenStavBehuSimulacie(this.pauza);
               
        // model tabulky - statistiky radu - kozmeticky
        DefaultTableModel modelIne = (DefaultTableModel) ineStatistiky.getModel();
        
        // aktualizacia aktualneho simulacneho casu
        modelIne.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(), 0, 1);
        
        // ako dlho bolo otvorene po - aktualizacia hodnoty
        if (((KozmetickySalon) objekt).dajSimulacnyCas() > 28800) {
            modelIne.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).akoDlhoBoloOtvorenePo()), 1, 1);
        }
        
        // aktualizacia priemerneho casu zakaznika v modeli
        modelIne.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyVSysteme()), 4, 1);     
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelIne.setValueAt(((KozmetickySalon) objekt).dajFormatovanySimulacnyCas(((KozmetickySalon) objekt).dajPriemernyCasStravenyVSysteme()), 4, 2);
        }
        
        // aktualizacia poctu ludi, ktori prisli do systemu       
        modelIne.setValueAt(((KozmetickySalon) objekt).dajPocetLudiKtoriPrisliDoSystemu(), 2, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelIne.setValueAt(((KozmetickySalon) objekt).dajPocetLudiKtoriPrisliDoSystemu(), 2, 2);
        }
        
        // aktualizacia poctu ludi, ktori odisli zo systemu
        modelIne.setValueAt(((KozmetickySalon) objekt).dajPocetLudiKtoriOdisliZoSystemu(), 3, 1);
        if (((KozmetickySalon) objekt).dajSimulacnyCas() < 28800) {
            modelIne.setValueAt(((KozmetickySalon) objekt).dajPocetLudiKtoriOdisliZoSystemu(), 3, 2);
        }
        
        // aktualizacia poctu ludi muselo odist z radu pred recepcnymi
        if (((KozmetickySalon) objekt).dajSimulacnyCas() >= 28800) {
            modelIne.setValueAt(((KozmetickySalon) objekt).dajKolkoLudiBoloPoslanychDomov(), 5, 1);
        }
           
        // ak je koniec nastaveny na true, takukonci simulaciu
        if (koniec) {
            ((KozmetickySalon) objekt).ukonciCeluSimulaciu();
        }
    }
}
